// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using ForcasrSummaryWebApi.MetaData;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace ForcasrSummaryWebApi.MetaData
{
    public partial class budgetForecastContext
    {
        private IbudgetForecastContextProcedures _procedures;

        public virtual IbudgetForecastContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new budgetForecastContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IbudgetForecastContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<uploadDataResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<usp_GetDimFactDataResult>().HasNoKey().ToView(null);
        }
    }

    public partial class budgetForecastContextProcedures : IbudgetForecastContextProcedures
    {
        private readonly budgetForecastContext _context;

        public budgetForecastContextProcedures(budgetForecastContext context)
        {
            _context = context;
        }

        public virtual async Task<List<uploadDataResult>> uploadDataAsync(string jsonData, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "jsonData",
                    Size = -1,
                    Value = jsonData ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<uploadDataResult>("EXEC @returnValue = [dbo].[uploadData] @jsonData", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<usp_GetDimFactDataResult>> usp_GetDimFactDataAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<usp_GetDimFactDataResult>("EXEC @returnValue = [dbo].[usp_GetDimFactData]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
